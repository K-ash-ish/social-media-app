generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)

  authorId Int?
  author   Profile? @relation(fields: [authorId], references: [id])

  comments Comment[]
  Like     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  authorId Int
  author   Profile @relation(fields: [authorId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  authorId Int
  author   Profile @relation(fields: [authorId], references: [id])
}

model Profile {
  id         Int     @id @default(autoincrement())
  bio        String?
  name       String?
  userHandle String  @unique
  pictureUrl String?

  userId       Int      @unique
  currentUsers Follow[] @relation("currentUserFollow")
  following    Follow[] @relation("following")

  posts Post[]
  user  User   @relation(fields: [userId], references: [id])

  comments Comment[]

  likes     Like[]
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followingId   Int
  currentUserId Int

  following   Profile @relation("following", fields: [followingId], references: [id])
  currentUser Profile @relation("currentUserFollow", fields: [currentUserId], references: [id])
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  authType AuthType
  password String?
  profile  Profile?
}

enum AuthType {
  PASSWORD
  GOOGLE
}
